Version=2.2
NumberOfModules=0
Build1=Default,B4RDev
NumberOfFiles=0
NumberOfLibraries=5
Library1=rcore
Library2=resp8266
Library3=resp8266wifi
Library4=rmqtt
Library5=rrandomaccessfile
@EndOfDesignText@
' Author: Cloyd Nino Catanaoan
'
' Features:
'  - Determine heat index
'  - Determine dewpoint
'  - Determine thermal comfort:
'    * Empiric comfort function based on comfort profiles(parametric lines)
'    * Multiple comfort profiles possible. Default based on http://epb.apogee.net/res/refcomf.asp  (References invalid)
'    * Determine If it's too cold, hot, humid, dry, based on current comfort profile
'    * More info at [Determining Thermal Comfort Using a humidity And temperature Sensor](https://www.azosensors.com/article.aspx?ArticleID=487)
'  - Determine human perception based on humidity, temperature And dew point according To Horstmeyer, Steve (2006-08-15). [Relative humidity....Relative To What? The Dew Point temperature...a better approach](http://www.shorstmeyer.com/wxfaqs/humidity/humidity.html)

#Region Project Attributes
	#AutoFlushLogs: True
	#CheckArrayBounds: True
	#StackBufferSize: 600
#End Region

Sub Process_Globals
	'These global variables will be declared once when the application starts.
	'Public variables can be accessed from all modules.
	Public Serial1 As Serial
	Private d1pins As D1Pins
	Private pin16 As Pin
	Private d6 As Pin
	Private WiFi As ESP8266WiFi
	Private WiFiStr As WiFiSocket
	Private MQTT As MqttClient
	Private MQTTOpt As MqttConnectOptions
	Private MQTTUser As String = "vynckfaq"
	Private MQTTPassword As String = "KHSV1Q1qSUUY"
	Private MQTTHostName As String = "m14.cloudmqtt.com"
	Private MQTTPort As Int = 11816
	Private ESP As ESP8266
	Private WiFiSSID As String = "Rise Above This Home"
	Private WiFiPassword As String = "SteelReserve"
	Public Timer1 As Timer                    'Timer for reading DHT11 measures at desired interval
	Public DHT11pin As Pin                    ' ESP8266 Pin connected to DHT11 signal
	Public Interval As Int                    'Interval as seconds
	Private d3pins As D1Pins
	Public DHT11Temp As Double
	Public DHT11Hum As Double
	Public DHT11State As Int
	Public DHT11HeatIndex As Double
	Public DHT11DewPoint As Double
	Public DHT11Perception As Int
	Public DHT11ComfortStatus As Int
End Sub

Private Sub AppStart
	Serial1.Initialize(115200)
	Delay(3000)
	Log("AppStart")
	' Pin 2 is the blue LED
	' Pin 16 is the red LED
	' D6 = pin 12 is the logic/signal pin. Use 3.3v pin of Node MCU.
	
	pin16.Initialize(16, pin16.MODE_OUTPUT)
	d6.Initialize(d1pins.D6, d6.MODE_OUTPUT)
	
	Log("Stopping access point")
	RunNative("SetSTA", Null)
	
	' Connect to WiFi
	ConnectToWifi

	' Connect to CloudMQTT broker
	Dim ClientId As String = Rnd(0, 999999999) 'create a unique id
	MQTT.Initialize2(WiFiStr.stream, MQTTHostName, MQTTPort, ClientId, "MQTT_MessageArrived", "MQTT_Disconnected")
	MQTTOpt.Initialize(MQTTUser, MQTTPassword)
	MQTT_Connect(0)
	
	' Loop for DHT11 reading
	Interval = 5                                        '5 sec Timer Interval
	DHT11pin.Initialize(d3pins.D3, DHT11pin.MODE_INPUT)        'Initialize at Arduino Pin 3
	Timer1.Initialize("Timer1_Tick", Interval * 1000)
	RunNative("setup",Null)
	Timer1.Enabled=True
End Sub

Sub MQTT_Connect(Unused As Byte)
	If WiFi.IsConnected = False Then
		ConnectToWifi
	End If
	If MQTT.Connect = False Then
		Log("Connecting to broker")
		MQTT.Connect2(MQTTOpt)
		CallSubPlus("MQTT_Connect", 1000, 0)
	Else
		pin16.DigitalWrite(False)
		Log("Connected to broker")
		MQTT.Subscribe("Cloyd", 0)
	End If
End Sub

Sub mqtt_MessageArrived (Topic As String, Payload() As Byte)
	pin16.DigitalWrite(False)
	Log("Message arrived. Topic=", Topic, " Payload=", Payload)
	If Payload = "Restart controller" Then
		MQTT.Publish("Cloyd","*Restarting relay by remote")
		ESP.Restart
	End If
End Sub

Sub mqtt_Disconnected
	pin16.DigitalWrite(True)
	Log("Disconnected from broker")
	MQTT.Close
	MQTT_Connect(0)
End Sub

Sub ConnectToWifi
	WiFi.Connect2(WiFiSSID, WiFiPassword)

	If WiFi.IsConnected Then
		Log("Connected to WiFi, Local IP ", WiFi.LocalIp)
	Else
		Log("Not Connected to WiFi")
	End If
End Sub

Sub Timer1_Tick
	RunNative("ReadDHT1",Null)

	Dim localstate As String
	Select Case DHT11State
		Case 0
			' The sensor samples And its checksum are OK.
			localstate = "OK"
		Case 1
			localstate = "TIMEOUT"
			' A timeout occurred, And communication has failed.
		Case 2
			' The checksum test failed. This means that data was received but may Not be correct.
			localstate = "CHECKSUM"
	End Select

	' Return value       Dew point                        Human perception[6]
	'    7         Over 26 °C (>78.8°F)     Severely high, even deadly For asthma related illnesses
	'    6         24–26 °C (75.2-78.8°F)   Extremely uncomfortable, oppressive
	'    5         21–24 °C (69.8-75.2°F)   Very humid, quite uncomfortable
	'    4         18–21 °C (64.4-69.8°F)   Somewhat uncomfortable For most people at upper limit
	'    3         16–18 °C (60.8-64.4°F)   OK For most, but everyone perceives the humidity at upper limit
	'    2         13–16 °C (55.4-60.8°F)   Comfortable
	'    1         10–12 °C (50-53.6°F)     Very comfortable
	'    0         Under 10 °C (<50°F)      Feels like the western US, a Bit dry To some
	
	Dim localperception As String
	Select Case DHT11Perception
		Case 0
			localperception = "Feels like the western US, a bit dry to some"
		Case 1
			localperception = "Very comfortable"
		Case 2
			localperception = "Comfortable"
		Case 3
			localperception = "OK but everyone perceives the humidity at upper limit"
		Case 4
			localperception = "Somewhat uncomfortable for most people at upper limit"
		Case 5
			localperception = "Very humid, quite uncomfortable"
		Case 6
			localperception = "Extremely uncomfortable, oppressive"
		Case 7
			localperception = "Severely high, even deadly for asthma related illnesses"
	End Select
	
	Dim localcomfortstatus As String
	Select Case DHT11ComfortStatus
		Case 0
			localcomfortstatus = "OK"
		Case 1
			localcomfortstatus = "Too hot"
		Case 2
			localcomfortstatus = "Too cold"
		Case 4
			localcomfortstatus = "Too dry"
		Case 5
			localcomfortstatus = "Hot and dry"
		Case 6
			localcomfortstatus = "Cold and dry"
		Case 8
			localcomfortstatus = "Too humid"
		Case 9
			localcomfortstatus = "Hot and humid"
		Case 10
			localcomfortstatus = "Cold and humid"
		Case Else
			localcomfortstatus = "Unknown"
	End Select
	
	Log("State: ", localstate, " Temp: ", DHT11Temp, " ºF Humidity: " , DHT11Hum, " %", " HeatIndex: ", DHT11HeatIndex, " Dew Point: ", DHT11DewPoint, " Perception: ", localperception, " Comfort Status: ", localcomfortstatus)
	If WiFi.IsConnected Then
		Dim s As String  
		s = JoinStrings(Array As String(localstate,"|",DHT11Temp, "|",DHT11Hum , "|",DHT11Perception, "|", DHT11ComfortStatus, "|", DHT11HeatIndex,"|", DHT11DewPoint))
		Log("Sending to MQTT: ",s)
		MQTT.Publish("Cloyd",s)
	End If
End Sub

#If C
#include "DHTesp.h"

#define DHT1Pin 0 //change here the IO-Pin
#define DHTTYPE DHT11

ComfortState cf;
DHTesp dht11;

void setup(B4R::Object* o){
dht11.setup(DHT1Pin);
}

void ReadDHT1(B4R::Object* o) {
	 b4r_main::_dht11state = dht11.getStatus();
	 // Add 12 percent based on home hygrometer.
 	 float humidity = dht11.getHumidity() + 12;
 	 float temperature = dht11.toFahrenheit(dht11.getTemperature());
     b4r_main::_dht11hum  = humidity; 
     b4r_main::_dht11temp = temperature; 
	 b4r_main::_dht11heatindex = dht11.computeHeatIndex(temperature, humidity, true);
	 b4r_main::_dht11dewpoint = dht11.computeDewPoint(temperature, humidity, true);
	 b4r_main::_dht11perception = dht11.computePerception(temperature, humidity, true);
	 float cr = dht11.getComfortRatio(cf, temperature, humidity, true);

	  switch(cf) {
	    case Comfort_OK:
	      b4r_main::_dht11comfortstatus = 0;
	      break;
	    case Comfort_TooHot:
	      b4r_main::_dht11comfortstatus = 1;
	      break;
	    case Comfort_TooCold:
	      b4r_main::_dht11comfortstatus = 2;
	      break;
	    case Comfort_TooDry:
	      b4r_main::_dht11comfortstatus = 4;
	      break;
	    case Comfort_TooHumid:
	      b4r_main::_dht11comfortstatus = 8;
	      break;
	    case Comfort_HotAndHumid:
	      b4r_main::_dht11comfortstatus = 9;
	      break;
	    case Comfort_HotAndDry:
	      b4r_main::_dht11comfortstatus = 5;
	      break;
	    case Comfort_ColdAndHumid:
	      b4r_main::_dht11comfortstatus = 10;
	      break;
	    case Comfort_ColdAndDry:
	      b4r_main::_dht11comfortstatus = 6;
	      break;
	    default:
	      b4r_main::_dht11comfortstatus = -1;
	      break;
	  };
  }
#End If

#if C
void SetSTA(B4R::Object* o) {
   WiFi.mode(WIFI_STA);
}
#end if


