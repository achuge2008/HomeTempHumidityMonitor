Version=2.2
NumberOfModules=0
Build1=Default,B4RDev
NumberOfFiles=0
NumberOfLibraries=4
Library1=rcore
Library2=resp8266
Library3=resp8266wifi
Library4=rmqtt
@EndOfDesignText@
' Home Weather Station Using DHT22 (AM2302)
'
' Features:
'  - Determine heat index
'  - Determine dewpoint
'  - Determine thermal comfort:
'    * Empiric comfort function based on comfort profiles(parametric lines)
'    * Multiple comfort profiles possible. Default based on http://epb.apogee.net/res/refcomf.asp  (References invalid)
'    * Determine If it's too cold, hot, humid, dry, based on current comfort profile
'    * More info at [Determining Thermal Comfort Using a humidity And temperature Sensor](https://www.azosensors.com/article.aspx?ArticleID=487)
'  - Determine human perception based on humidity, temperature And dew point according To Horstmeyer, Steve (2006-08-15). [Relative humidity....Relative To What? The Dew Point temperature...a better approach](http://www.shorstmeyer.com/wxfaqs/humidity/humidity.html)

'     DHT-22 Sensor   ->      ESP8266
'          OUT        ->        D3
'          GRD -      ->        GRD
'          VCC +      ->        3.3V

'************************************************************************

' Carbon Monoxide (CO) Monitor Using MQ-7 sensor
'
' I used the following sites To help me reach the outcome:
'
' Gas Sensor "Carbon Monoxide" - MQ-7 aka "Flying-Fish" - https://www.hackster.io/ingo-lohs/gas-sensor-carbon-monoxide-mq-7-aka-flying-fish-e58457
' ARDUINO CO MONITOR USING MQ-7 SENSOR - http://www.instructables.com/id/Arduino-CO-Monitor-Using-MQ-7-Sensor/

' MQ-7 Carbon Monoxide Sensor: It is sensitive To gases like Alcohol (hand sanitizer), Butane (a lighter) And Difluoroethane (compressed "air" duster), among other gasses. 
' Datasheet found here: http://cvrr.ucsd.edu/ece156/ECE156Sensors/Carbon_Monoxide.pdf

'     MQ-7 Sensor    ->      ESP8266
'         A0         ->        A0
'         D0         ->        D0
'         VCC        ->        VIN (5.5V)
'         GRD        ->        GRD


#Region Project Attributes
	#AutoFlushLogs: True
	#CheckArrayBounds: True
	#StackBufferSize: 2000
#End Region

Sub Process_Globals
	'These global variables will be declared once when the application starts.
	'Public variables can be accessed from all modules.
	Public Serial1 As Serial
	Private d1pins As D1Pins
	Private pin16 As Pin
	Private d6 As Pin
	Private WiFi As ESP8266WiFi
	Private WiFiStr As WiFiSocket
	Private MQTT As MqttClient
	Private MQTTOpt As MqttConnectOptions
	Private MQTTUser As String = "vynckfaq"
	Private MQTTPassword As String = "KHSV1Q1qSUUY"
	Private MQTTHostName As String = "m14.cloudmqtt.com"
	Private MQTTPort As Int = 11816
	Private ESP As ESP8266
	Private WiFiSSID As String = "RiseAboveThisHome"
	Private WiFiPassword As String = "SteelReserve" 
	Public DHT22pin As Pin                    ' ESP8266 Pin connected to DHT22 signal
	Private d3pins As D1Pins
	Public DHT22Temp As Double
	Public DHT22Hum As Double
	Public DHT22State As Int
	Public DHT22HeatIndex As Double
	Public DHT22DewPoint As Double
	Public DHT22Perception As Int
	Public DHT22ComfortStatus As Int
	Private MQ7Pin As Pin                 ' Output pin connected from the MQ-7 sensor
	Private MQ7PinNumber As Byte = 0x00   ' Pin number used is A0 (Analog)
	Private readVoltage As UInt
End Sub

Private Sub AppStart
	Serial1.Initialize(115200)
	Delay(3000)
	Log("AppStart")
	' Pin 2 is the blue LED
	' Pin 16 is the red LED
	' D6 = pin 12 is the logic/signal pin. Use 3.3v pin of Node MCU.
	
	pin16.Initialize(16, pin16.MODE_OUTPUT)
	d6.Initialize(d1pins.D6, d6.MODE_OUTPUT)
	
	Log("Stopping access point")
	RunNative("SetSTA", Null)
	
	' Connect to WiFi
	ConnectToWifi

	' Connect to cloud MQTT broker
	Dim ClientId As String = Rnd(0, 999999999) 'create a unique id
	MQTT.Initialize2(WiFiStr.stream, MQTTHostName, MQTTPort, ClientId, "MQTT_MessageArrived", "MQTT_Disconnected")
	MQTTOpt.Initialize(MQTTUser, MQTTPassword)
	MQTT_Connect(0)
	
	' Loop for DHT22 reading
	DHT22pin.Initialize(d3pins.D3, DHT22pin.MODE_INPUT) 
	RunNative("setup",Null)
	ReadWeather(0)
		
	' Loop for MQ-7 reading
	MQ7Pin.Initialize(MQ7PinNumber, MQ7Pin.MODE_INPUT)
	Preparation1(0)
End Sub

Sub MQTT_Connect(Unused As Byte)
	If WiFi.IsConnected = False Then
		ConnectToWifi
	End If
	
	If MQTT.Connect = False Then
		Log("Connecting to broker")
		MQTT.Connect2(MQTTOpt)
		CallSubPlus("MQTT_Connect", 1000, 0)
	Else
		pin16.DigitalWrite(False)
		Log("Connected to broker")
		MQTT.Subscribe("TempHumid", 0)
		MQTT.Subscribe("MQ7", 0)
	End If
End Sub

Sub mqtt_MessageArrived (Topic As String, Payload() As Byte)
	pin16.DigitalWrite(False)
	Log("Message arrived. Topic=", Topic, " Payload=", Payload)
	
	If Topic = "TempHumid" Then
		If Payload = "Restart controller" Then
			MQTT.Publish("TempHumid","*Restarting relay by remote")
			ESP.Restart
		End If
	Else If Topic = "MQ7" Then
		If Payload = "Read voltage" Then
			Dim s As String
			s = JoinStrings(Array As String(readVoltage))
			MQTT.Publish("MQ7",s)
		End If
	End If
End Sub

Sub mqtt_Disconnected
	pin16.DigitalWrite(True)
	Log("Disconnected from broker")
	MQTT.Close
	MQTT_Connect(0)
End Sub

Sub ConnectToWifi
	WiFi.Connect2(WiFiSSID, WiFiPassword)

	If WiFi.IsConnected Then
		Log("Connected to ",WiFiSSID," network, Local IP ", WiFi.LocalIp)
	Else
		Log("Not Connected to WiFi")
	End If
End Sub

Sub ReadWeather(tag As Byte)
	RunNative("ReadDHT22",Null)
	
	Dim localstate As String
	Select Case DHT22State
		Case 0
			' The sensor samples And its checksum are OK.
			localstate = "OK"
		Case 1
			localstate = "TIMEOUT"
			' A timeout occurred, And communication has failed.
		Case 2
			' The checksum test failed. This means that data was received but may Not be correct.
			localstate = "CHECKSUM"
	End Select

	' Return value       Dew point                        Human perception[6]
	'    7         Over 26 °C (>78.8°F)     Severely high, even deadly For asthma related illnesses
	'    6         24–26 °C (75.2-78.8°F)   Extremely uncomfortable, oppressive
	'    5         21–24 °C (69.8-75.2°F)   Very humid, quite uncomfortable
	'    4         18–21 °C (64.4-69.8°F)   Somewhat uncomfortable For most people at upper limit
	'    3         16–18 °C (60.8-64.4°F)   OK For most, but everyone perceives the humidity at upper limit
	'    2         13–16 °C (55.4-60.8°F)   Comfortable
	'    1         10–12 °C (50-53.6°F)     Very comfortable
	'    0         Under 10 °C (<50°F)      Feels like the western US, a Bit dry To some
	
	Dim localperception As String
	Select Case DHT22Perception
		Case 0
			localperception = "Feels like the western US, a bit dry to some"
		Case 1
			localperception = "Very comfortable"
		Case 2
			localperception = "Comfortable"
		Case 3
			localperception = "OK but everyone perceives the humidity at upper limit"
		Case 4
			localperception = "Somewhat uncomfortable for most people at upper limit"
		Case 5
			localperception = "Very humid, quite uncomfortable"
		Case 6
			localperception = "Extremely uncomfortable, oppressive"
		Case 7
			localperception = "Severely high, even deadly for asthma related illnesses"
	End Select
	
	Dim localcomfortstatus As String
	Select Case DHT22ComfortStatus
		Case 0
			localcomfortstatus = "OK"
		Case 1
			localcomfortstatus = "Too hot"
		Case 2
			localcomfortstatus = "Too cold"
		Case 4
			localcomfortstatus = "Too dry"
		Case 5
			localcomfortstatus = "Hot and dry"
		Case 6
			localcomfortstatus = "Cold and dry"
		Case 8
			localcomfortstatus = "Too humid"
		Case 9
			localcomfortstatus = "Hot and humid"
		Case 10
			localcomfortstatus = "Cold and humid"
		Case Else
			localcomfortstatus = "Unknown"
	End Select
	
	Log("State: ", localstate, " Temp: ", DHT22Temp, " ºF Humidity: " , DHT22Hum, " % Perception: ", localperception, " Comfort Status: ", localcomfortstatus, " HeatIndex: ", DHT22HeatIndex, " ºF Dew Point: ", DHT22DewPoint," ºF")
	If WiFi.IsConnected Then
		Dim s As String  
		s = JoinStrings(Array As String(localstate,"|",DHT22Temp, "|",DHT22Hum , "|",DHT22Perception, "|", DHT22ComfortStatus, "|", DHT22HeatIndex,"|", DHT22DewPoint))
		Log("Sending TempHumid to MQTT: ",s)
 		MQTT.Publish("TempHumid",s)
	End If
	
	CallSubPlus("ReadWeather",5000,0)
End Sub

Sub Preparation1(tag As Byte)
	Log("Turn the heater fully on")
	MQ7Pin.AnalogWrite(1024) ' HIGH = 1024
	Log("Heat for 1 min")
	CallSubPlus("Preparation2",60000,0)
End Sub

Sub Preparation2(tag As Byte)
	Log("Now reducing the heating power: turn the heater to approx 1.5V")
	MQ7Pin.AnalogWrite(307.2) ' 1024x1500/5000; 1024 is Arduino 5V's steps, 1500/5000 got from 1.5V/5V
	Log("Heat for 90 sec")
	CallSubPlus("ReadSensor1",90000,0)
End Sub

Sub ReadSensor1(tag As Byte)
	Log("We need to read the sensor at 5V, but must not let it heat up. So hurry!")
	MQ7Pin.AnalogWrite(1024)
	Log("Delay for 50 milli")
	CallSubPlus("ReadSensor2",50,0) ' Getting an analog read apparently takes 100uSec
End Sub

Sub ReadSensor2(tag As Byte)
	Dim rawvoltage As UInt = MQ7Pin.AnalogRead / 2
	
	Log("*************************")
	Log("MQ-7 PPM: ",rawvoltage)
	readVoltage = rawvoltage 
	
	Dim s As String
	s = JoinStrings(Array As String(rawvoltage))
	Log("Sending ppm via MQTT: ",s)
	If WiFi.IsConnected Then 
		MQTT.Publish("MQ7",s)
	End If
	
	' Detecting range: 10ppm-1000ppm carbon monoxide
	' Air quality-cases: < 100 perfect | 100 - 400 normal | > 400 - 900 high | > 900 abnormal
	If rawvoltage <= 100 Then
		Log("Air-Quality: CO perfect")
	else if ((rawvoltage > 100) And (rawvoltage < 400)) Or rawvoltage = 400 Then
		Log("Air-Quality: CO normal")
	else if ((rawvoltage > 400) And (rawvoltage < 900)) Or rawvoltage = 900 Then
		Log("Air-Quality: CO high")
	else If rawvoltage > 900 Then
		Log("Air-Quality: ALARM CO very high")
	Else
		Log("MQ-7 - cant read any value - check the sensor!")
	End If
	Log("*************************")
	CallSubPlus("Preparation1",1000,0)
End Sub

#If C
#include "DHTesp.h"

#define DHT22Pin 0 //change here the IO-Pin

ComfortState cf;
DHTesp dht22;

void setup(B4R::Object* o){
	dht22.setup(DHT22Pin);
}

 void SetSTA(B4R::Object* o) {
   WiFi.mode(WIFI_STA);
}

void ReadDHT22(B4R::Object* o) {
	 b4r_main::_dht22state = dht22.getStatus();
	 // Add 12 percent based on home hygrometer.
 	 float humidity = dht22.getHumidity() + 13.5;
 	 float temperature = dht22.toFahrenheit(dht22.getTemperature()) + 0.5;
     b4r_main::_dht22hum  = humidity; 
     b4r_main::_dht22temp = temperature; 
	 b4r_main::_dht22heatindex = dht22.computeHeatIndex(temperature, humidity, true);
	 b4r_main::_dht22dewpoint = dht22.computeDewPoint(temperature, humidity, true);
	 b4r_main::_dht22perception = dht22.computePerception(temperature, humidity, true);
	 float cr = dht22.getComfortRatio(cf, temperature, humidity, true);

	  switch(cf) {
	    case Comfort_OK:
	      b4r_main::_dht22comfortstatus = 0;
	      break;
	    case Comfort_TooHot:
	      b4r_main::_dht22comfortstatus = 1;
	      break;
	    case Comfort_TooCold:
	      b4r_main::_dht22comfortstatus = 2;
	      break;
	    case Comfort_TooDry:
	      b4r_main::_dht22comfortstatus = 4;
	      break;
	    case Comfort_TooHumid:
	      b4r_main::_dht22comfortstatus = 8;
	      break;
	    case Comfort_HotAndHumid:
	      b4r_main::_dht22comfortstatus = 9;
	      break;
	    case Comfort_HotAndDry:
	      b4r_main::_dht22comfortstatus = 5;
	      break;
	    case Comfort_ColdAndHumid:
	      b4r_main::_dht22comfortstatus = 10;
	      break;
	    case Comfort_ColdAndDry:
	      b4r_main::_dht22comfortstatus = 6;
	      break;
	    default:
	      b4r_main::_dht22comfortstatus = -1;
	      break;
	  };
  }
#End If

